# SPDX-FileCopyrightText: 2025 Swiss Confederation
#
# SPDX-License-Identifier: MIT

spring:
  datasource:
    url: "${POSTGRES_JDBC}"
    username: "${secret.db.username:${POSTGRES_USER}}"
    password: "${secret.db.password:${POSTGRES_PASSWORD}}"
    driver-class-name: org.postgresql.Driver
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate # issuer-agent-management is owner of the schema, so we just validate if it matches

springdoc:
  show-actuator: true

application:
  # DID of the Issuer
  issuer-id: "${ISSUER_ID}"
  template-replacement: # Hash Map of Values replaced in the templating
    external-url: "${EXTERNAL_URL}" # URL under which this service can be reached from the web
  token-ttl: 600
  # JSON file holding OpenID Connect configuration
  #eg:  openid_file: "file:///data/openid.json"
  openid-file: "${OPENID_CONFIG_FILE}"
  # JSON file holding OpenID4VCI Metadata configuration
  #eg:  openid_file: "file:///data/myapplication_metadata.json"
  metadata-file: "${METADATA_CONFIG_FILE}"
  # List of Json Web Keys which are whitelisted to have signed the offer data
  data-integrity-jwks: ${JWKS_ALLOWLIST}
  key:
    sdjwt:
      # Method of signing key management
      # key: use provided private key for signing. softhsm: use softhsm. securosys: use securosys hsm
      key-management-method: "${SIGNING_KEY_MANAGEMENT_METHOD:key}"
      # Pin to unlock the hsm
      hsm:
        user-pin: "${secret.key.hsm.pin.user:${HSM_USER_PIN:}}"
        # Key identifier or alias, or label when using pkcs11-tool
        key-id: "${secret.key.hsm.id:${HSM_KEY_ID:}}"
        # Optional pin to unlock the key
        key-pin: "${secret.key.hsm.pin.key:${HSM_KEY_PIN:}}"
        # File Path to the HSM config file. For settings see https://docs.oracle.com/en/java/javase/21/security/pkcs11-reference-guide1.html
        pkcs11-config: "${HSM_CONFIG_PATH:}"

        # For Cloud HSM like eg. securosys
        # User for logging in on the host
        user: "${HSM_USER:}"
        # URI of the HSM Host or Proxy to be connected to
        host: "${HSM_HOST:}"
        # Password for the Host
        password: "${HSM_PASSWORD:}"
        # Port for either the proxy or host
        port: "${HSM_PORT:}"
        # When using a proxy with username / password authentication
        proxy-user: "${HSM_PROXY_USER:}"
        proxy-password: "${HSM_PROXY_PASSWORD:}"

      # Signing Key for Selective Disclosure JWT Verifiable Credentials
      private-key: "${secret.key.sdjwt.key:${SDJWT_KEY:}}"
      # Data used to interact with other parties in this case the public key => verifies that the signer can use the associated private key
      # eg: did:tdw:<base-registry-url>:<issuer_uuid>#<sdjwt-public-key-fragment>
      verification-method: "${DID_SDJWT_VERIFICATION_METHOD:}"

management:
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health, info

logging:
  level:
    ch.admin.bj.swiyu.issuer.oid4vci.infrastructure.logging.RequestLoggingFilter: DEBUG
